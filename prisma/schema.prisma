// Learn more about Prisma schema file in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// -----------------------------------------------------------------------------
// Poster
// Represents an individual poster with associated metadata
// -----------------------------------------------------------------------------
model Poster {
  id              String  @id @default(uuid())
  title           String?
  prompt          String
  image           String
  isPublic        Boolean @default(true) @map(name: "is_public")
  filename        String?
  jobId           String? @map(name: "job_id")
  discordImageUrl String? @map(name: "discord_image_url")
  mjImageUrl      String? @map(name: "mj_image_url")

  width   Int?
  height  Int?
  size    Int?
  ratio   String?
  style   String?
  model   String?
  chaos   Int?
  quality Float?
  stylize Int?
  seed    Int?
  tile    Boolean?
  stop    Int?

  referencedImage Json? @map(name: "referenced_image")

  likes        Like[]        @relation("posterLikes")
  categories   Category[]
  boardPosters BoardPoster[]

  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String? @map(name: "user_id")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("posters")
}

// -----------------------------------------------------------------------------
// Category
// Represents a category that can be associated with many posters
// -----------------------------------------------------------------------------
model Category {
  id          String  @id @default(uuid())
  name        String
  slug        String
  icon        String?
  description String?
  image       String?

  posters Poster[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("categories")
}

// -----------------------------------------------------------------------------
// BoardPoster
// Join table for many-to-many relationship between boards and posters
// -----------------------------------------------------------------------------
model BoardPoster {
  boardId  String @map(name: "board_id")
  posterId String @map(name: "poster_id")
  position Int

  board  Board  @relation(fields: [boardId], references: [id])
  poster Poster @relation(fields: [posterId], references: [id])

  @@id([boardId, posterId])
  @@map("board_posters")
}

// -----------------------------------------------------------------------------
// Board
// Represents a user-created collection of posters
// -----------------------------------------------------------------------------
model Board {
  id          String  @id @default(uuid())
  name        String
  slug        String
  icon        String?
  description String?
  isPublic    Boolean @default(true) @map(name: "is_public")

  boardPosters BoardPoster[]

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map(name: "user_id")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("boards")
}

// -----------------------------------------------------------------------------
// Like
// Represents a like given by a user to a specific poster
// -----------------------------------------------------------------------------
model Like {
  id String @id @default(uuid())

  user   User   @relation("userLikes", fields: [userId], references: [id])
  userId String @map(name: "user_id")

  poster   Poster @relation("posterLikes", fields: [posterId], references: [id], onDelete: Cascade)
  posterId String @map(name: "poster_id")

  createdAt DateTime @default(now()) @map(name: "created_at")

  @@unique([userId, posterId])
  @@map("likes")
}

// -----------------------------------------------------------------------------
// Follow
// Represents a follow relationship between two users
// -----------------------------------------------------------------------------
model Follow {
  id String @id @default(uuid())

  follower   User   @relation("follower", fields: [followerId], references: [id])
  followerId String @map(name: "follower_id")

  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String @map(name: "following_id")

  createdAt DateTime @default(now()) @map(name: "created_at")

  @@unique([followerId, followingId])
  @@map("follows")
}

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
//                              NextAuth.js Models
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------

enum UserRole {
  ADMIN
  USER
}

// -----------------------------------------------------------------------------
// User
// Represents an individual user with associated account and profile information
// -----------------------------------------------------------------------------
model User {
  id            String    @id @default(cuid())
  name          String
  username      String    @unique
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          UserRole?

  stripeCustomerId String? @map("stripe_customer_id")

  accounts Account[]
  sessions Session[]
  posters  Poster[]
  boards   Board[]

  likes     Like[]   @relation("userLikes")
  followers Follow[] @relation("following")
  following Follow[] @relation("follower")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("users")
}

// -----------------------------------------------------------------------------
// Account
// Represents an account linked to a user for authentication
// -----------------------------------------------------------------------------
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String?
  provider          String
  providerAccountId String  @map("provider_account_id")
  token_type        String?
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  scope             String?
  id_token          String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// -----------------------------------------------------------------------------
// Session
// Represents a session of a logged-in user
// -----------------------------------------------------------------------------
model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("sessions")
}

// -----------------------------------------------------------------------------
// VerificationToken
// Represents a token for user verification
// -----------------------------------------------------------------------------
model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}
