import type { APIAttachment } from "discord-api-types/v10";
import { create } from "zustand";

import { readStreamData } from "../lib/imageGenerationUtils";

type ImageGenerationState = {
  image: APIAttachment | null;
  isLoading: boolean;
  error: string | unknown | null;
  message?: string;
};

export type ImageGenerationSetAction = {
  setImage: (image: APIAttachment | null) => void;
  setIsLoading: (isLoading: boolean) => void;
  setError: (error: string | unknown | null) => void;
};

type ImageGenerationAction = ImageGenerationSetAction & {
  generateImage: (prompt: string) => Promise<void>;
};

export const useImageGenerationStore = create<
  ImageGenerationAction & ImageGenerationState
>()((set) => {
  const setImage = (image: APIAttachment | null) => {
    set(() => ({ image }));
  };
  const setIsLoading = (isLoading: boolean) => {
    set(() => ({ isLoading }));
  };
  const setError = (error: string | unknown | null) => {
    set(() => ({ error }));
  };
  const setMessage = (message: string) => {
    set(() => ({ message }));
  };

  return {
    image: null,
    isLoading: false,
    error: null,
    message: "",
    setImage,
    setIsLoading,
    setError,
    generateImage: async (prompt) => {
      setImage(null);
      setIsLoading(true);
      setError(null);
      setMessage("");

      try {
        const { status } = await fetch("/api/imagine", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ prompt }),
        });

        if (status === 200) {
          setMessage(
            "Your image is currently being generated by Midjourney, please wait a moment."
          );
          const response = await fetch("/api/get-messages", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ prompt }),
          });

          if (response.body) {
            const reader = response.body.getReader();
            await readStreamData(reader, { setImage, setIsLoading, setError });
          }
        } else {
          setMessage(
            `Something went wrong while generating the image, please try again.\n\nStatus code: ${status}`
          );
          throw new Error("Something went wrong");
        }
      } catch (error_: unknown) {
        setMessage(
          `Something went wrong while generating the image, please try again.\n\n${error_}`
        );
        setError(error_);
      }
    },
  };
});
